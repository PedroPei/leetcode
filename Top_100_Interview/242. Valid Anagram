/*
Given two strings s and t, write a function to determine if t is an anagram of s.

For example,
s = "anagram", t = "nagaram", return true.
s = "rat", t = "car", return false.

Note:
You may assume the string contains only lowercase alphabets.

Follow up:
What if the inputs contain unicode characters? How would you adapt your solution to such case?
*/

/*
    Java uses Unicode while C++ uses ASCII.
    Given that the unicode retain the relative order of alphabet,it's ok to use a-'a' and the result could be converted to integer

*/



//cpp solution 1

class Solution {
public:
    bool isAnagram(string s, string t) {
        int sLength = s.size();
        int tLength = t.size();
        if(sLength != tLength) return false;
        char sList[26];
        char tList[26];
        for(int i = 0;i < 26;i ++){
            sList[i] = 0;
            tList[i] = 0;
        }
        for(int i = 0;i < sLength;i ++){
            sList[s[i]-'a']++;
            tList[t[i]-'a']++;
        }
        for(int i = 0;i < 26;i ++){
            if(sList[i] != tList[i]) return false;
        }
        return true;
    }
};


//java solution 2
public class Solution {
    public boolean isAnagram(String s, String t) {
        int[] alphabet = new int[26];
        for (int i = 0; i < s.length(); i++) alphabet[s.charAt(i) - 'a']++;
        for (int i = 0; i < t.length(); i++) alphabet[t.charAt(i) - 'a']--;
        for (int i : alphabet) if (i != 0) return false;
        return true;
    }
}


