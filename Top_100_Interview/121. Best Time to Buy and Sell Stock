/*
Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Example 1:
Input: [7, 1, 5, 3, 6, 4]
Output: 5

max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)
Example 2:
Input: [7, 6, 4, 3, 1]
Output: 0

In this case, no transaction is done, i.e. max profit = 0.
*/



//In this problem,you need to find the biggest gap in which the small one must emerge before the big one.
//The difficulty is that we can'n assume the smallest number to be contained in the gap pair because the biggest gap may emerge
early
//Here we use "profit" to record the biggest gap that have emerged before and "min" to record the smallest number we have traversed
so that all the compare are based on current minimum number which can finally solve this problem.



public class Solution {
    public int maxProfit(int[] prices) {
        int j = prices.length,profit = 0,min = Integer.MAX_VALUE;
        for(int i = 0;i < j;i ++){
            if(min > prices[i])
                min = prices[i];
            else if(prices[i] - min > profit)
                profit = prices[i] - min;
        }
        return profit;
    }
}
